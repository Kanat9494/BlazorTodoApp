@page "/todo"

@inject BlazorTodoApp.Data.Repository.IRepository todoRepository

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2 class="text-center">Todo (@todos.Count(item => !item.IsDone))</h2>

            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Is Done</th>
                        <th scope="col"></th>
                    </tr>
                </thead>

                @foreach (var item in todos)
                {
                    <tbody>
                        <tr>
                            <td>
                                <div style="@(item.IsDone ? "color: green; text-decoration: line-through;" : "color: red")">@item.Title</div>
                            </td>
                            <td>
                                @if (!item.IsDone)
                                {
                                    <input type="checkbox" value="item.IsDone" @onchange="(() => StatusChanger(item))">
                                }
                                else 
                                {
                                    <input type="checkbox" checked value="item.IsDone" @onchange="(() => StatusChanger(item))">
                                }
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="(() => DeleteTodo(item.TodoId))">Удалить</button>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>

            <div class="row">
                <div class="col">
                    <input class="form-control" placeholder="Type something todo" @bind="newTodo"/>
                </div>

                <div class="col">
                    @*<button class="btn btn-success" @onclick="AddTodo" >Add todo</button>*@
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <button class="btn btn-success" @onclick="CallTimer">Вызвать таймер</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code 
{
    private IEnumerable<TodoItem> todos = new List<TodoItem>();

    //protected override void OnInitialized()
    //{
    //    todos = todoRepository.GetAllItems();
    //}

    private Timer timer;

    protected override void OnInitialized()
    {
        todos = todoRepository.GetAllItems();
        //timer = new Timer(async (object? stateInfo) =>
        //{
        //    todos = todoRepository.GetAllItems();

        //    await InvokeAsync(() =>
        //    {
        //        StateHasChanged();

        //    });
        //}, new AutoResetEvent(false), 2000, 2000);
    }

    private string newTodo;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todoRepository.AddTodo(newTodo);
            newTodo = string.Empty;
        }
    }

    private void DeleteTodo(int id) =>
        todoRepository.DeleteTodo(id);

    private void StatusChanger(TodoItem changeItem)
    {
        changeItem.IsDone = !changeItem.IsDone;
        todoRepository.ValueChanged(changeItem);
    }

    private async Task CallTimer()
    {
        //TimerCallback timerCallback = new TimerCallback(LoadItems);
        //Timer time = new Timer(timerCallback, null, 0, 3000);
        timer = new Timer(async (object? stateInfo) =>
        {
            LoadItems();

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }, new AutoResetEvent(false), 4000, 4000);
    }

    private void LoadItems()
    {
        todos = todoRepository.GetAllItems();
        //StateHasChanged();
    }
}
